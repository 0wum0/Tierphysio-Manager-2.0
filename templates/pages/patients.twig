{% extends 'layouts/base.twig' %}

{% block title %}Patientenverwaltung - {{ parent() }}{% endblock %}

{% block scripts %}
{{ parent() }}
<script src="/public/js/patients.js"></script>
{% endblock %}

{% block content %}
<div class="space-y-6 animate-in" x-data="patientsManager()" x-init="init()">
    <!-- Moderner Header -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-6 gap-3">
        <div>
            <h1 class="text-3xl font-semibold text-gray-100 tracking-tight">
                🐾 Patientenübersicht
            </h1>
            <p class="text-gray-400 text-sm">
                Hier findest du alle registrierten Tiere und ihre Besitzer.
            </p>
        </div>

        <button @click="openNewPatientModal()"
                class="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-500
                       hover:from-indigo-500 hover:via-purple-500 hover:to-pink-400
                       text-white font-medium px-5 py-2.5 rounded-xl shadow-lg
                       transition-all duration-300 flex items-center gap-2">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                 stroke-width="2" stroke="currentColor" class="w-5 h-5">
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
            </svg>
            Neuer Patient
        </button>
    </div>

    <!-- Optionale Trennlinie -->
    <hr class="border-gray-700/50 mb-6">

    <!-- Loading State -->
    <div x-show="loading" class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent"></div>
    </div>

    <!-- Patients Grid -->
    <div x-show="!loading" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Patient Cards -->
        <template x-for="patient in patients" :key="patient.id">
            <div class="patient-card bg-white dark:bg-gray-900 rounded-xl shadow-md hover:shadow-lg cursor-pointer hover:scale-[1.01] transition-all transform"
                 :data-id="patient.id"
                 @click="openPatient(patient.id)">
                <!-- Patient Image -->
                <img x-show="patient.image" 
                     :src="patient.image.startsWith('/') ? patient.image : '/' + patient.image" 
                     :alt="patient.name" 
                     class="rounded-t-xl w-full h-40 object-cover">
                <img x-show="!patient.image"
                     src="/public/img/patient_placeholder.svg" 
                     :alt="patient.name" 
                     class="rounded-t-xl w-full h-40 object-cover">
                
                <!-- Card Content -->
                <div class="p-4">
                    <h3 class="text-lg font-semibold text-purple-600 dark:text-purple-400" x-text="patient.name"></h3>
                    <p class="text-sm text-gray-600 dark:text-gray-300">
                        <span x-text="getSpeciesIcon(patient.species)"></span>
                        <span x-text="getSpeciesName(patient.species)"></span>
                    </p>
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Besitzer: <span x-text="patient.owner_full_name || '—'"></span></p>
                    
                    <!-- Nächster Termin -->
                    <p class="text-xs text-gray-400 mt-1" x-show="patient.next_appointment">
                        🗓️ Nächster Termin: <span x-text="patient.next_appointment"></span>
                    </p>
                    
                    <!-- Rechnungsstatus -->
                    <p class="text-xs mt-1">
                        <span x-show="patient.invoice_status === 'open'" class="bg-red-500/20 text-red-400 px-2 py-0.5 rounded-full text-[11px]">💰 Rechnung offen</span>
                        <span x-show="patient.invoice_status === 'paid'" class="bg-green-500/20 text-green-400 px-2 py-0.5 rounded-full text-[11px]">✅ Bezahlt</span>
                    </p>
                    
                    <!-- Action Buttons -->
                    <div class="flex justify-between mt-3 gap-2">
                        <button @click.stop="editPatient(patient)" 
                                class="bg-purple-500 hover:bg-purple-600 text-white px-3 py-1 rounded text-sm transition-colors">
                            Bearbeiten
                        </button>
                        <button @click.stop="deletePatient(patient)" 
                                class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition-colors">
                            Löschen
                        </button>
                    </div>
                </div>
            </div>
        </template>

        <!-- Add Patient Card -->
        <div @click="openNewPatientModal()" class="bg-white/10 dark:bg-gray-800/50 backdrop-blur-md rounded-2xl border-2 border-dashed border-purple-500/30 flex items-center justify-center min-h-[300px] hover:border-purple-400/50 transition-all duration-300 cursor-pointer group">
            <div class="text-center">
                <div class="w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:bg-purple-500/30 transition-colors">
                    <svg class="w-8 h-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                </div>
                <p class="text-gray-600 dark:text-gray-400">Patient hinzufügen</p>
            </div>
        </div>
    </div>

    <!-- No Results -->
    <div x-show="!loading && patients.length === 0" class="text-center py-12">
        <svg class="w-24 h-24 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
        </svg>
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">Keine Patienten gefunden</h3>
        <p class="text-gray-500 dark:text-gray-400 mt-2">Fügen Sie Ihren ersten Patienten hinzu!</p>
    </div>

    <!-- Create/Edit Modal -->
    <div x-show="showModal" 
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed inset-0 z-50 flex items-center justify-center p-4 overflow-y-auto" 
         style="display: none;">
        <!-- Backdrop -->
        <div class="fixed inset-0 bg-black/70 backdrop-blur-sm" @click="closeModal()"></div>

        <!-- Modal Panel -->
        <div class="bg-white dark:bg-gray-800 rounded-lg text-left shadow-xl transform transition-all max-w-4xl w-full max-h-[90vh] overflow-y-auto relative z-10">
                <form @submit.prevent="savePatient()" id="patientForm">
                    <div class="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-6" x-text="modalTitle"></h3>
                        
                        <!-- Tab Navigation -->
                        <div class="border-b border-gray-200 dark:border-gray-700 mb-6">
                            <nav class="-mb-px flex space-x-8" aria-label="Tabs">
                                <button type="button"
                                        @click="activeTab = 'patient'"
                                        :class="activeTab === 'patient' ? 'border-purple-500 text-purple-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                        class="py-2 px-1 border-b-2 font-medium text-sm">
                                    Patientendaten
                                </button>
                                <button type="button"
                                        @click="activeTab = 'owner'"
                                        :class="activeTab === 'owner' ? 'border-purple-500 text-purple-600' : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'"
                                        class="py-2 px-1 border-b-2 font-medium text-sm">
                                    Besitzerdaten
                                </button>
                            </nav>
                        </div>
                        
                        <!-- Patient Tab -->
                        <div x-show="activeTab === 'patient'" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <!-- Name -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Name *</label>
                                <input type="text" x-model="currentPatient.name" required
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                            </div>

                            <!-- Species -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tierart *</label>
                                <select x-model="currentPatient.species" required
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                    <option value="">Bitte wählen</option>
                                    <option value="dog">🐕 Hund</option>
                                    <option value="cat">🐈 Katze</option>
                                    <option value="horse">🐴 Pferd</option>
                                    <option value="rabbit">🐰 Hase</option>
                                    <option value="bird">🦜 Vogel</option>
                                    <option value="reptile">🦎 Reptil</option>
                                    <option value="other">🐾 Andere</option>
                                </select>
                            </div>

                            <!-- Breed -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Rasse</label>
                                <input type="text" x-model="currentPatient.breed"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                            </div>

                            <!-- Birth Date -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Geburtsdatum</label>
                                <input type="date" x-model="currentPatient.birth_date"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                            </div>

                            <!-- Gender -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Geschlecht</label>
                                <select x-model="currentPatient.gender"
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                    <option value="unknown">Unbekannt</option>
                                    <option value="male">Männlich</option>
                                    <option value="female">Weiblich</option>
                                    <option value="neutered_male">Kastriert (männlich)</option>
                                    <option value="spayed_female">Kastriert (weiblich)</option>
                                </select>
                            </div>

                            <!-- Weight -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Gewicht (kg)</label>
                                <input type="number" step="0.1" x-model="currentPatient.weight"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                            </div>

                            <!-- Microchip -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Chip-Nummer</label>
                                <input type="text" x-model="currentPatient.microchip"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                            </div>

                            <!-- Color -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Farbe</label>
                                <input type="text" x-model="currentPatient.color"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                            </div>

                            <!-- Profile Image Upload -->
                            <div class="md:col-span-2" x-show="currentPatient.id">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Profilbild</label>
                                <div class="flex items-center space-x-4">
                                    <img x-show="currentPatient.image" 
                                         :src="currentPatient.image.startsWith('/') ? currentPatient.image : '/' + currentPatient.image" 
                                         class="w-20 h-20 rounded-lg border border-gray-600 object-cover" 
                                         alt="Patientenbild">
                                    <input type="file" 
                                           name="image"
                                           x-ref="fileInput" 
                                           @change="uploadImage($event)" 
                                           accept="image/*"
                                           class="text-sm text-gray-700 dark:text-gray-200 file:mr-4 file:py-2 file:px-4 file:rounded-lg file:border-0 file:text-sm file:font-semibold file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100">
                                </div>
                            </div>

                            <!-- Notes -->
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Notizen</label>
                                <textarea x-model="currentPatient.notes" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500"></textarea>
                            </div>
                        </div>

                        <!-- Owner Tab -->
                        <div x-show="activeTab === 'owner'" class="space-y-4">
                            <!-- Owner Selection or New -->
                            <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 mb-4">
                                <label class="flex items-center space-x-3">
                                    <input type="radio" x-model="ownerMode" value="existing" class="text-purple-600 focus:ring-purple-500">
                                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Bestehenden Besitzer auswählen</span>
                                </label>
                                <label class="flex items-center space-x-3 mt-2">
                                    <input type="radio" x-model="ownerMode" value="new" class="text-purple-600 focus:ring-purple-500">
                                    <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Neuen Besitzer anlegen</span>
                                </label>
                            </div>

                            <!-- Existing Owner Selection -->
                            <div x-show="ownerMode === 'existing'" class="transition-all duration-200">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Besitzer auswählen *</label>
                                <select x-model="currentPatient.owner_id" :required="ownerMode === 'existing'"
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                    <option value="">Bitte wählen</option>
                                    <template x-for="owner in owners" :key="owner.id">
                                        <option :value="owner.id" x-text="`${owner.first_name} ${owner.last_name} (${owner.customer_number || 'K00000'})`"></option>
                                    </template>
                                </select>
                            </div>

                            <!-- New Owner Form -->
                            <div x-show="ownerMode === 'new'" class="grid grid-cols-1 md:grid-cols-2 gap-4 transition-all duration-200">
                                <!-- Salutation -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Anrede</label>
                                    <select x-model="currentOwner.salutation"
                                            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                        <option value="Herr">Herr</option>
                                        <option value="Frau">Frau</option>
                                        <option value="Divers">Divers</option>
                                        <option value="Firma">Firma</option>
                                    </select>
                                </div>

                                <!-- Empty space for layout -->
                                <div></div>

                                <!-- First Name -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Vorname *</label>
                                    <input type="text" x-model="currentOwner.first_name" :required="ownerMode === 'new'"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- Last Name -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Nachname *</label>
                                    <input type="text" x-model="currentOwner.last_name" :required="ownerMode === 'new'"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- Phone -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Telefon</label>
                                    <input type="tel" x-model="currentOwner.phone"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- Mobile -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Mobil</label>
                                    <input type="tel" x-model="currentOwner.mobile"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- Email -->
                                <div class="md:col-span-2">
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">E-Mail</label>
                                    <input type="email" x-model="currentOwner.email"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- Street -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Straße</label>
                                    <input type="text" x-model="currentOwner.street"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- House Number -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Hausnummer</label>
                                    <input type="text" x-model="currentOwner.house_number"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- Postal Code -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">PLZ</label>
                                    <input type="text" x-model="currentOwner.postal_code"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>

                                <!-- City -->
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Stadt</label>
                                    <input type="text" x-model="currentOwner.city"
                                           class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-purple-500">
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button type="submit" 
                                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-base font-medium text-white hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
                            Speichern
                        </button>
                        <button type="button" @click="closeModal()"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                            Abbrechen
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Patient Detail Modal -->
    <div x-data="patientModal()" x-init="init()" x-show="open" 
         class="fixed inset-0 bg-black/70 flex items-center justify-center z-50" 
         x-cloak>
        
        <!-- Modal Content -->
        <div id="patientModalBox"
             class="bg-slate-900 rounded-2xl shadow-2xl w-full max-w-5xl overflow-hidden"
             @click.away="open=false"
             x-transition.scale.origin.center>
            
            <!-- Modal Header -->
            <header class="px-6 py-4 border-b border-slate-700 flex justify-between items-center">
                <h2 class="text-xl font-semibold text-white">🐾 Patientenakte</h2>
                <button @click="open=false" class="text-gray-400 hover:text-white text-2xl">✕</button>
            </header>
            
            <!-- Modal Body with fixed height and scroll -->
            <div class="h-[70vh] flex flex-col">
                <template x-if="patient">
                    <div class="flex flex-col h-full">
                        <!-- Patient Info Header -->
                        <div class="px-6 py-4 border-b border-slate-700">
                            <h2 class="text-2xl font-semibold text-purple-400" x-text="patient.name"></h2>
                            <p class="text-sm text-gray-400">Besitzer: <span x-text="patient.owner_full_name"></span></p>
                        </div>

                        <!-- TABS NAVIGATION -->
                        <div class="flex border-b border-slate-700 px-6">
                            <button :class="tab==='info' ? 'border-b-2 border-purple-500 text-purple-400' : 'text-gray-400 hover:text-gray-300'" 
                                    class="px-4 py-2 transition-colors" 
                                    @click="tab='info'">Info</button>
                            <button :class="tab==='befunde' ? 'border-b-2 border-purple-500 text-purple-400' : 'text-gray-400 hover:text-gray-300'" 
                                    class="px-4 py-2 transition-colors" 
                                    @click="tab='befunde'">Befunde</button>
                            <button :class="tab==='notizen' ? 'border-b-2 border-purple-500 text-purple-400' : 'text-gray-400 hover:text-gray-300'" 
                                    class="px-4 py-2 transition-colors" 
                                    @click="tab='notizen'">Notizen</button>
                            <button :class="tab==='dokumente' ? 'border-b-2 border-purple-500 text-purple-400' : 'text-gray-400 hover:text-gray-300'" 
                                    class="px-4 py-2 transition-colors" 
                                    @click="tab='dokumente'; loadDocuments()">📄 Dokumente</button>
                        </div>

                        <!-- TAB CONTENT - Scrollable Area -->
                        <div class="flex-1 overflow-y-auto p-6 space-y-4">
                        <!-- INFO TAB -->
                        <div x-show="tab==='info'" x-transition>
                            <ul class="text-sm text-gray-700 dark:text-gray-200 space-y-2">
                                <li><strong>Tierart:</strong> <span x-text="getSpeciesName(patient.species)"></span></li>
                                <li><strong>Rasse:</strong> <span x-text="patient.breed || '—'"></span></li>
                                <li><strong>Geburtsdatum:</strong> <span x-text="formatDate(patient.birth_date)"></span></li>
                                <li><strong>Geschlecht:</strong> <span x-text="getGenderName(patient.gender)"></span></li>
                                <li><strong>Gewicht:</strong> <span x-text="patient.weight ? patient.weight + ' kg' : '—'"></span></li>
                                <li><strong>Farbe:</strong> <span x-text="patient.color || '—'"></span></li>
                                <li><strong>Chip-Nr:</strong> <span x-text="patient.microchip || '—'"></span></li>
                                <li><strong>Status:</strong> <span x-text="patient.is_active ? 'Aktiv' : 'Inaktiv'"></span></li>
                            </ul>
                            
                            <!-- Anstehende Termine -->
                            <div class="mt-4 border-t border-gray-700 pt-3">
                                <h4 class="font-medium text-lilac-400">Anstehende Termine</h4>
                                <template x-if="appointments && appointments.length > 0">
                                    <ul class="text-sm mt-2 space-y-1">
                                        <template x-for="a in appointments" :key="a.id">
                                            <li class="flex justify-between bg-gray-100 dark:bg-gray-800 p-2 rounded">
                                                <span x-text="a.appointment_date + ' ' + a.start_time"></span>
                                                <span class="text-xs text-gray-500" x-text="a.status"></span>
                                            </li>
                                        </template>
                                    </ul>
                                </template>
                                <template x-if="!appointments || appointments.length === 0">
                                    <p class="text-xs text-gray-500 mt-2">Keine kommenden Termine.</p>
                                </template>
                            </div>
                        </div>

                        <!-- BEFUNDE TAB -->
                        <div x-show="tab==='befunde'" x-transition>
                            <textarea x-model="newRecord" 
                                      placeholder="Neuer Befund..." 
                                      class="w-full p-2 rounded bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-100 border border-gray-300 dark:border-gray-600"></textarea>
                            <button @click="saveRecord()" 
                                    class="mt-2 px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors">
                                Speichern
                            </button>

                            <ul class="mt-3 space-y-2">
                                <template x-for="record in records" :key="record.id">
                                    <li class="bg-gray-100 dark:bg-gray-700 p-3 rounded">
                                        <p class="text-sm" x-text="record.content"></p>
                                        <p class="text-xs text-gray-400 mt-1" x-text="formatDate(record.created_at)"></p>
                                    </li>
                                </template>
                            </ul>
                        </div>

                        <!-- NOTIZEN TAB -->
                        <div x-show="tab==='notizen'" x-transition>
                            <textarea x-model="newNote" 
                                      placeholder="Neue Notiz..." 
                                      class="w-full p-2 rounded bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-100 border border-gray-300 dark:border-gray-600"></textarea>
                            <button @click="saveNote()" 
                                    class="mt-2 px-4 py-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors">
                                Speichern
                            </button>

                            <ul class="mt-3 space-y-2">
                                <template x-for="note in notes" :key="note.id">
                                    <li class="bg-gray-100 dark:bg-gray-700 p-3 rounded">
                                        <p class="text-sm" x-text="note.content"></p>
                                        <p class="text-xs text-gray-400 mt-1" x-text="formatDate(note.created_at)"></p>
                                    </li>
                                </template>
                            </ul>
                        </div>

                        <!-- DOKUMENTE TAB -->
                        <div x-show="tab==='dokumente'" x-transition class="space-y-3 p-2">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-gray-700 dark:text-gray-200 font-semibold">Dokumente & Dateien</h3>
                                <label class="cursor-pointer inline-flex items-center px-3 py-1.5 bg-purple-600 hover:bg-purple-700 text-white text-sm rounded-lg transition-colors">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                    </svg>
                                    Dokument hochladen
                                    <input type="file" 
                                           @change="uploadDocument($event)" 
                                           class="hidden" 
                                           accept=".pdf,.jpg,.jpeg,.png,.gif,.webp">
                                </label>
                            </div>

                            <template x-if="documents.length === 0">
                                <div class="text-center py-8 bg-gray-50 dark:bg-gray-800 rounded-lg border-2 border-dashed border-gray-300 dark:border-gray-600">
                                    <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                    <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">Noch keine Dokumente vorhanden</p>
                                    <p class="text-xs text-gray-400 dark:text-gray-500 mt-1">PDF, JPG, PNG oder andere Dateien hochladen</p>
                                </div>
                            </template>

                            <div class="space-y-2">
                                <template x-for="doc in documents" :key="doc.id">
                                    <div class="flex items-center justify-between bg-white dark:bg-gray-800 p-3 rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow">
                                        <div class="flex items-center space-x-3">
                                            <div class="flex-shrink-0">
                                                <svg class="h-8 w-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                </svg>
                                            </div>
                                            <div>
                                                <a :href="'/' + doc.file_path" 
                                                   target="_blank" 
                                                   class="text-purple-600 dark:text-purple-400 hover:underline font-medium" 
                                                   x-text="doc.title || doc.file_name"></a>
                                                <p class="text-xs text-gray-500 dark:text-gray-400" x-text="'Hochgeladen am: ' + formatDate(doc.created_at)"></p>
                                            </div>
                                        </div>
                                        <button @click="deleteDocument(doc.id)" 
                                                class="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-600 p-1 rounded hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
                                                title="Dokument löschen">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
        </div>
    </div>
</div>

<script>
function patientsManager() {
    return {
        patients: [],
        owners: [],
        loading: false,
        showModal: false,
        modalTitle: 'Neuer Patient',
        searchQuery: '',
        speciesFilter: '',
        searchTimeout: null,
        activeTab: 'patient',
        ownerMode: 'existing',
        currentPatient: {
            id: null,
            name: '',
            species: '',
            breed: '',
            birth_date: '',
            gender: 'unknown',
            weight: '',
            microchip: '',
            color: '',
            owner_id: '',
            notes: ''
        },
        currentOwner: {
            salutation: 'Herr',
            first_name: '',
            last_name: '',
            phone: '',
            mobile: '',
            email: '',
            street: '',
            house_number: '',
            postal_code: '',
            city: ''
        },

        async init() {
            await this.loadOwners();
            await this.loadPatients();
            
            // Get CSRF token if needed
            this.csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
        },

        async loadPatients() {
            this.loading = true;
            try {
                const params = new URLSearchParams({
                    action: 'list',
                    q: this.searchQuery,
                    species: this.speciesFilter
                });

                const response = await fetch(`/api/patients.php?${params}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const contentType = response.headers.get('content-type') || '';
                if (!contentType.includes('application/json')) {
                    throw new Error('Invalid JSON response');
                }
                
                const data = await response.json();
                
                // Support both new and old response formats
                if (data && (data.ok === true || data.status === 'success')) {
                    // New format: data.data.items, old format: data.data.data or data.data
                    const items = data.data?.items ?? data.data?.data ?? data.data ?? [];
                    this.patients = Array.isArray(items) ? items : [];
                    
                    // Animate cards on load
                    this.$nextTick(() => {
                        if (typeof anime !== 'undefined') {
                            anime({
                                targets: '.grid > div',
                                translateY: [20, 0],
                                opacity: [0, 1],
                                delay: anime.stagger(100),
                                duration: 600,
                                easing: 'easeOutQuad'
                            });
                        }
                    });
                } else {
                    throw new Error(data.error || 'Unbekannter Fehler');
                }
            } catch (error) {
                console.error('Fehler beim Laden der Patienten:', error);
                this.showNotification('Fehler beim Laden der Patienten: ' + error.message, 'error');
            } finally {
                this.loading = false;
            }
        },

        async loadOwners() {
            try {
                const response = await fetch('/api/owners.php?action=list');
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const contentType = response.headers.get('content-type') || '';
                if (!contentType.includes('application/json')) {
                    throw new Error('Invalid JSON response');
                }
                
                const data = await response.json();
                
                // Support both new and old response formats
                if (data && (data.ok === true || data.status === 'success')) {
                    // New format: data.data.items, old format: data.data.data or data.data
                    const items = data.data?.items ?? data.data?.data ?? data.data ?? [];
                    this.owners = Array.isArray(items) ? items : [];
                } else {
                    throw new Error(data.error || 'Unbekannter Fehler');
                }
            } catch (error) {
                console.error('Fehler beim Laden der Besitzer:', error);
            }
        },

        debounceSearch() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                this.loadPatients();
            }, 500);
        },

        openNewPatientModal() {
            // Alias für die alte Funktion
            this.openCreateModal();
        },

        openCreateModal() {
            this.modalTitle = 'Neuer Patient';
            this.activeTab = 'patient';
            this.ownerMode = 'existing';
            this.currentPatient = {
                id: null,
                name: '',
                species: '',
                breed: '',
                birth_date: '',
                gender: 'unknown',
                weight: '',
                microchip: '',
                color: '',
                owner_id: '',
                notes: '',
                image: ''
            };
            this.currentOwner = {
                salutation: 'Herr',
                first_name: '',
                last_name: '',
                phone: '',
                mobile: '',
                email: '',
                street: '',
                house_number: '',
                postal_code: '',
                city: ''
            };
            this.showModal = true;
        },

        editPatient(patient) {
            this.modalTitle = 'Patient bearbeiten';
            this.activeTab = 'patient';
            this.ownerMode = 'existing';
            this.currentPatient = {
                id: patient.id,
                name: patient.name,
                species: patient.species,
                breed: patient.breed || '',
                birth_date: patient.birth_date || '',
                gender: patient.gender || 'unknown',
                weight: patient.weight || '',
                microchip: patient.microchip || '',
                color: patient.color || '',
                owner_id: patient.owner_id,
                notes: patient.notes || '',
                image: patient.image || ''
            };
            this.showModal = true;
        },

        closeModal() {
            this.showModal = false;
            if (typeof anime !== 'undefined') {
                anime({
                    targets: '.modal',
                    opacity: [1, 0],
                    duration: 300,
                    easing: 'easeOutQuad'
                });
            }
        },

        async savePatient() {
            try {
                const formData = new FormData();
                const action = this.currentPatient.id ? 'update' : 'create';
                
                // Add patient data
                if (this.currentPatient.id) {
                    formData.append('id', this.currentPatient.id);
                }
                formData.append('patient_name', this.currentPatient.name);
                formData.append('species', this.currentPatient.species);
                formData.append('breed', this.currentPatient.breed);
                formData.append('birthdate', this.currentPatient.birth_date);
                formData.append('gender', this.currentPatient.gender);
                formData.append('weight', this.currentPatient.weight);
                formData.append('microchip', this.currentPatient.microchip);
                formData.append('color', this.currentPatient.color);
                formData.append('notes', this.currentPatient.notes);
                
                // Add owner data based on mode
                if (this.ownerMode === 'existing') {
                    if (!this.currentPatient.owner_id) {
                        this.showNotification('Bitte wählen Sie einen Besitzer aus', 'error');
                        return;
                    }
                    formData.append('owner_mode', 'existing');
                    formData.append('owner_id', this.currentPatient.owner_id);
                } else if (this.ownerMode === 'new') {
                    // Validate new owner data
                    if (!this.currentOwner.first_name || !this.currentOwner.last_name) {
                        this.showNotification('Bitte geben Sie Vor- und Nachname des Besitzers ein', 'error');
                        return;
                    }
                    
                    // Add owner mode and fields
                    formData.append('owner_mode', 'new');
                    formData.append('owner_salutation', this.currentOwner.salutation);
                    formData.append('owner_first_name', this.currentOwner.first_name);
                    formData.append('owner_last_name', this.currentOwner.last_name);
                    formData.append('owner_phone', this.currentOwner.phone);
                    formData.append('owner_mobile', this.currentOwner.mobile);
                    formData.append('owner_email', this.currentOwner.email);
                    formData.append('owner_street', this.currentOwner.street);
                    formData.append('owner_house_number', this.currentOwner.house_number);
                    formData.append('owner_postal_code', this.currentOwner.postal_code);
                    formData.append('owner_city', this.currentOwner.city);
                }

                // Add CSRF token if available
                if (this.csrfToken) {
                    formData.append('_csrf_token', this.csrfToken);
                }
                
                const response = await fetch('/api/patients.php?action=' + action, {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const contentType = response.headers.get('content-type') || '';
                if (!contentType.includes('application/json')) {
                    throw new Error('Invalid JSON response');
                }
                
                const data = await response.json();
                
                // Support both new and old response formats
                if (data && (data.ok === true || data.status === 'success')) {
                    this.closeModal();
                    await this.loadOwners(); // Reload owners if new one was created
                    await this.loadPatients();
                    
                    // Success animation
                    const message = this.currentPatient.id ? 'Patient erfolgreich aktualisiert!' : 'Patient erfolgreich angelegt!';
                    this.showNotification(message, 'success');
                } else {
                    this.showNotification(data.error || 'Fehler beim Speichern', 'error');
                }
            } catch (error) {
                console.error('Fehler beim Speichern:', error);
                this.showNotification('Fehler beim Speichern des Patienten', 'error');
            }
        },

        async deletePatient(patient) {
            if (!confirm(`Möchten Sie ${patient.name} wirklich löschen?`)) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('id', patient.id);
                
                // Add CSRF token if available
                if (this.csrfToken) {
                    formData.append('_csrf_token', this.csrfToken);
                }

                const response = await fetch('/api/patients.php?action=delete', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                
                const contentType = response.headers.get('content-type') || '';
                if (!contentType.includes('application/json')) {
                    throw new Error('Invalid JSON response');
                }
                
                const data = await response.json();
                
                // Support both new and old response formats
                if (data && (data.ok === true || data.status === 'success')) {
                    await this.loadPatients();
                    this.showNotification('Patient erfolgreich gelöscht!', 'success');
                } else {
                    this.showNotification(data.error || 'Fehler beim Löschen', 'error');
                }
            } catch (error) {
                console.error('Fehler beim Löschen:', error);
                this.showNotification('Fehler beim Löschen', 'error');
            }
        },

        async openPatient(patientId) {
            // Dispatch event to open modal
            window.dispatchEvent(new CustomEvent('open-patient-modal', { detail: { id: patientId } }));
        },

        formatDate(dateString) {
            if (!dateString) return '—';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('de-DE', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
            } catch {
                return dateString;
            }
        },

        getGenderName(gender) {
            const names = {
                'male': 'Männlich',
                'female': 'Weiblich',
                'neutered_male': 'Kastriert (männlich)',
                'spayed_female': 'Kastriert (weiblich)',
                'unknown': 'Unbekannt'
            };
            return names[gender] || 'Unbekannt';
        },

        getSpeciesIcon(species) {
            const icons = {
                'dog': '🐕',
                'cat': '🐈',
                'horse': '🐴',
                'rabbit': '🐰',
                'bird': '🦜',
                'reptile': '🦎',
                'other': '🐾'
            };
            return icons[species] || '🐾';
        },

        getSpeciesName(species) {
            const names = {
                'dog': 'Hund',
                'cat': 'Katze',
                'horse': 'Pferd',
                'rabbit': 'Hase',
                'bird': 'Vogel',
                'reptile': 'Reptil',
                'other': 'Andere'
            };
            return names[species] || 'Unbekannt';
        },

        calculateAge(birthDate) {
            if (!birthDate) return '';
            const birth = new Date(birthDate);
            const today = new Date();
            const age = today.getFullYear() - birth.getFullYear();
            const monthDiff = today.getMonth() - birth.getMonth();
            
            if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
                return (age - 1) + (age === 1 ? ' Jahr' : ' Jahre');
            }
            
            return age + (age === 1 ? ' Jahr' : ' Jahre');
        },

        async uploadImage(e) {
            const file = e.target.files[0];
            if (!file) {
                this.showNotification('⚠️ Bitte zuerst ein Bild auswählen.', 'error');
                return;
            }

            // ID prüfen - wichtig: currentPatient für modales Fenster nutzen
            const patientId = this.currentPatient?.id;
            if (!patientId) {
                this.showNotification('❌ Keine Patienten-ID gefunden.', 'error');
                return;
            }

            const formData = new FormData();
            formData.append('action', 'upload_image');
            formData.append('image', file);
            formData.append('id', patientId);

            try {
                const res = await fetch('/api/patients.php?action=upload_image', {
                    method: 'POST',
                    body: formData
                });
                const data = await res.json();
                if (data.status === 'success') {
                    this.currentPatient.image = '/' + data.path;
                    const idx = this.patients.findIndex(p => p.id === this.currentPatient.id);
                    if (idx !== -1) this.patients[idx].image = '/' + data.path;
                    this.showNotification('✅ ' + data.message, 'success');
                } else {
                    this.showNotification('❌ ' + data.message, 'error');
                }
            } catch (err) {
                this.showNotification('Fehler: ' + err.message, 'error');
            }
        },

        showNotification(message, type) {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 shadow-lg ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);

            // Animate if anime.js is available
            if (typeof anime !== 'undefined') {
                anime({
                    targets: notification,
                    translateX: [100, 0],
                    opacity: [0, 1],
                    duration: 300,
                    easing: 'easeOutQuad'
                });

                setTimeout(() => {
                    anime({
                        targets: notification,
                        translateX: [0, 100],
                        opacity: [1, 0],
                        duration: 300,
                        easing: 'easeInQuad',
                        complete: () => notification.remove()
                    });
                }, 3000);
            } else {
                // Fallback without animation
                setTimeout(() => notification.remove(), 3000);
            }
        }
    };
}

function patientModal() {
    return {
        open: false,
        patient: null,
        notes: [],
        tab: 'info',
        records: [],
        documents: [],
        appointments: [],
        newRecord: '',
        newNote: '',
        
        init() {
            // Listen for open event
            window.addEventListener('open-patient-modal', async (e) => {
                await this.openPatient(e.detail.id);
            });
        },
        
        async openPatient(id) {
            this.open = true;
            this.tab = 'info'; // Reset to info tab
            this.newRecord = '';
            this.newNote = '';
            
            // Animate modal opening with anime.js
            this.$nextTick(() => {
                if (typeof anime !== 'undefined') {
                    anime({
                        targets: '#patientModalBox',
                        opacity: [0, 1],
                        scale: [0.9, 1],
                        duration: 300,
                        easing: 'easeOutExpo'
                    });
                }
            });
            
            try {
                const res = await fetch(`/api/patients.php?action=get&id=${id}`);
                const data = await res.json();
                
                if (data.status === "success" || data.ok === true) {
                    this.patient = data.patient || data.data?.items?.[0] || data.data?.[0] || null;
                    // Load all data for tabs
                    await Promise.all([
                        this.loadRecords(id),
                        this.loadNotes(id),
                        this.loadDocuments(),
                        this.loadAppointments(id)
                    ]);
                } else {
                    this.showNotification("Fehler: " + (data.message || data.error || 'Unbekannter Fehler'), 'error');
                }
            } catch (err) {
                console.error("API Fehler:", err);
                this.showNotification("Patientendaten konnten nicht geladen werden.", 'error');
            }
        },
        
        async loadRecords(id) {
            try {
                const res = await fetch(`/api/patients.php?action=get_records&patient_id=${id}`);
                const data = await res.json();
                this.records = (data.status === "success" || data.ok === true) ? (data.records || data.data || []) : [];
            } catch {
                this.records = [];
            }
        },
        
        async loadNotes(id) {
            try {
                const res = await fetch(`/api/patients.php?action=get_notes&patient_id=${id}`);
                const data = await res.json();
                this.notes = (data.status === "success" || data.ok === true) ? (data.notes || data.data || []) : [];
            } catch {
                this.notes = [];
            }
        },
        
        async loadDocuments() {
            if (!this.patient?.id) return;
            try {
                const res = await fetch('/api/patients.php?action=list_documents&id=' + this.patient.id);
                const data = await res.json();
                if (data.status === 'success') {
                    this.documents = data.documents || [];
                }
            } catch {
                this.documents = [];
            }
        },
        
        async loadAppointments(id) {
            try {
                const res = await fetch(`/api/patients.php?action=get_appointments&id=${id}`);
                const data = await res.json();
                this.appointments = (data.status === "success" || data.ok === true) ? (data.appointments || data.data || []) : [];
            } catch {
                this.appointments = [];
            }
        },
        
        async saveRecord() {
            if (!this.newRecord.trim()) return;
            try {
                const res = await fetch('/api/patients.php?action=save_record', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ patient_id: this.patient.id, content: this.newRecord })
                });
                const data = await res.json();
                if (data.status === 'success') {
                    this.records.unshift(data.record);
                    this.newRecord = '';
                    this.showNotification('Befund gespeichert', 'success');
                }
            } catch (err) {
                console.error('Fehler beim Speichern:', err);
                this.showNotification('Fehler beim Speichern des Befunds', 'error');
            }
        },

        async saveNote() {
            if (!this.newNote.trim()) return;
            try {
                const res = await fetch('/api/patients.php?action=save_note', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ patient_id: this.patient.id, content: this.newNote })
                });
                const data = await res.json();
                if (data.status === 'success') {
                    this.notes.unshift(data.note);
                    this.newNote = '';
                    this.showNotification('Notiz gespeichert', 'success');
                }
            } catch (err) {
                console.error('Fehler beim Speichern:', err);
                this.showNotification('Fehler beim Speichern der Notiz', 'error');
            }
        },

        async uploadDocument(e) {
            const file = e.target.files[0];
            if (!file || !this.patient?.id) return;
            
            const formData = new FormData();
            formData.append('file', file);
            formData.append('id', this.patient.id);

            try {
                const res = await fetch('/api/patients.php?action=upload_document', {
                    method: 'POST',
                    body: formData
                });
                const data = await res.json();
                if (data.status === 'success') {
                    // Reload documents to get the new one with all fields
                    await this.loadDocuments();
                    e.target.value = ''; // Reset file input
                    this.showNotification('✅ ' + data.message, 'success');
                } else {
                    this.showNotification('❌ ' + data.message, 'error');
                }
            } catch (err) {
                console.error('Upload-Fehler:', err);
                this.showNotification('Fehler beim Hochladen des Dokuments', 'error');
            }
        },

        async deleteDocument(id) {
            if (!confirm('Dokument wirklich löschen?')) return;
            try {
                const res = await fetch('/api/patients.php?action=delete_document&id=' + id);
                const data = await res.json();
                if (data.status === 'success') {
                    this.documents = this.documents.filter(d => d.id !== id);
                    this.showNotification('✅ Dokument gelöscht', 'success');
                } else {
                    this.showNotification('❌ ' + data.message, 'error');
                }
            } catch (err) {
                console.error('Löschfehler:', err);
                this.showNotification('Fehler beim Löschen', 'error');
            }
        },
        
        formatDate(dateString) {
            if (!dateString) return '—';
            try {
                const date = new Date(dateString);
                return date.toLocaleDateString('de-DE', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric'
                });
            } catch {
                return dateString;
            }
        },
        
        getSpeciesName(species) {
            const names = {
                'dog': 'Hund',
                'cat': 'Katze',
                'horse': 'Pferd',
                'rabbit': 'Hase',
                'bird': 'Vogel',
                'reptile': 'Reptil',
                'other': 'Andere'
            };
            return names[species] || 'Unbekannt';
        },
        
        getGenderName(gender) {
            const names = {
                'male': 'Männlich',
                'female': 'Weiblich',
                'neutered_male': 'Kastriert (männlich)',
                'spayed_female': 'Kastriert (weiblich)',
                'unknown': 'Unbekannt'
            };
            return names[gender] || 'Unbekannt';
        },
        
        showNotification(message, type = 'success') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-[100] shadow-lg ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);

            // Animate if anime.js is available
            if (typeof anime !== 'undefined') {
                anime({
                    targets: notification,
                    translateX: [100, 0],
                    opacity: [0, 1],
                    duration: 300,
                    easing: 'easeOutQuad'
                });

                setTimeout(() => {
                    anime({
                        targets: notification,
                        translateX: [0, 100],
                        opacity: [1, 0],
                        duration: 300,
                        easing: 'easeInQuad',
                        complete: () => notification.remove()
                    });
                }, 3000);
            } else {
                // Fallback without animation
                setTimeout(() => notification.remove(), 3000);
            }
        }
    };
}
</script>
{% endblock %}