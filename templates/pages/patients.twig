{% extends 'layouts/base.twig' %}

{% block title %}Patientenverwaltung - {{ parent() }}{% endblock %}

{% block content %}
<div class="space-y-6 animate-in" x-data="patientsManager()" x-init="init()">
    <!-- Header Section -->
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
        <div>
            <h1 class="text-3xl font-heading font-bold bg-gradient-to-r from-purple-400 to-indigo-400 bg-clip-text text-transparent">
                Patientenverwaltung
            </h1>
            <p class="text-gray-600 dark:text-gray-400 mt-2">
                Verwalten Sie alle Ihre tierischen Patienten an einem Ort
            </p>
        </div>
        <div class="mt-4 sm:mt-0">
            <button @click="openCreateModal()" 
                    class="inline-flex items-center px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-lg hover:from-purple-700 hover:to-indigo-700 transition-all duration-200 shadow-lg hover:shadow-xl">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Neuer Patient
            </button>
        </div>
    </div>

    <!-- Search and Filter Section -->
    <div class="bg-white/10 dark:bg-gray-800/50 backdrop-blur-md rounded-2xl border border-purple-500/20 p-6 shadow-xl">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="md:col-span-2">
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Suche</label>
                <div class="relative">
                    <input type="text" 
                           x-model="searchQuery"
                           @input="debounceSearch()"
                           placeholder="Name, Besitzer oder Chipnummer eingeben..." 
                           class="w-full px-4 py-2 pl-10 bg-white/50 dark:bg-gray-700/50 border border-purple-300/30 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:text-white placeholder-gray-400">
                    <svg class="absolute left-3 top-2.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Tierart</label>
                <select x-model="speciesFilter" @change="loadPatients()" class="w-full px-4 py-2 bg-white/50 dark:bg-gray-700/50 border border-purple-300/30 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent dark:text-white">
                    <option value="">Alle Arten</option>
                    <option value="dog">🐕 Hund</option>
                    <option value="cat">🐈 Katze</option>
                    <option value="horse">🐴 Pferd</option>
                    <option value="rabbit">🐰 Hase</option>
                    <option value="bird">🦜 Vogel</option>
                    <option value="reptile">🦎 Reptil</option>
                    <option value="other">🐾 Andere</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    <div x-show="loading" class="flex justify-center items-center py-12">
        <div class="animate-spin rounded-full h-12 w-12 border-4 border-purple-500 border-t-transparent"></div>
    </div>

    <!-- Patients Grid -->
    <div x-show="!loading" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <!-- Patient Cards -->
        <template x-for="patient in patients" :key="patient.id">
            <div class="bg-white/10 dark:bg-gray-800/50 backdrop-blur-md rounded-2xl border border-purple-500/20 overflow-hidden hover:shadow-2xl hover:border-purple-400/40 transition-all duration-300 group">
                <div class="aspect-video bg-gradient-to-br from-purple-600/20 to-indigo-600/20 relative">
                    <div class="absolute inset-0 flex items-center justify-center">
                        <div class="w-24 h-24 bg-white/20 rounded-full flex items-center justify-center">
                            <span class="text-4xl" x-text="getSpeciesIcon(patient.species)"></span>
                        </div>
                    </div>
                    <span class="absolute top-3 right-3 px-2 py-1 bg-green-500/80 text-white text-xs rounded-full">Aktiv</span>
                </div>
                <div class="p-5">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-1" x-text="patient.name"></h3>
                    <p class="text-sm text-gray-600 dark:text-gray-400">
                        <span x-text="getSpeciesName(patient.species)"></span>
                        <span x-show="patient.breed" x-text="' • ' + patient.breed"></span>
                        <span x-show="patient.birth_date" x-text="' • ' + calculateAge(patient.birth_date)"></span>
                    </p>
                    <p class="text-sm text-purple-600 dark:text-purple-400 mt-2">
                        Besitzer: <span x-text="patient.owner_first_name + ' ' + patient.owner_last_name"></span>
                    </p>
                    <div class="flex items-center justify-between mt-4 pt-4 border-t border-gray-200/20">
                        <div class="flex space-x-2">
                            <button @click="editPatient(patient)" class="text-blue-500 hover:text-blue-400 transition-colors" title="Bearbeiten">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                            </button>
                            <button @click="deletePatient(patient)" class="text-red-500 hover:text-red-400 transition-colors" title="Löschen">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                            </button>
                        </div>
                        <button @click="viewPatient(patient)" class="text-purple-500 hover:text-purple-400 transition-colors">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </button>
                    </div>
                </div>
            </div>
        </template>

        <!-- Add Patient Card -->
        <div @click="openCreateModal()" class="bg-white/10 dark:bg-gray-800/50 backdrop-blur-md rounded-2xl border-2 border-dashed border-purple-500/30 flex items-center justify-center min-h-[300px] hover:border-purple-400/50 transition-all duration-300 cursor-pointer group">
            <div class="text-center">
                <div class="w-16 h-16 bg-purple-500/20 rounded-full flex items-center justify-center mx-auto mb-4 group-hover:bg-purple-500/30 transition-colors">
                    <svg class="w-8 h-8 text-purple-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                </div>
                <p class="text-gray-600 dark:text-gray-400">Patient hinzufügen</p>
            </div>
        </div>
    </div>

    <!-- No Results -->
    <div x-show="!loading && patients.length === 0" class="text-center py-12">
        <svg class="w-24 h-24 mx-auto text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
        </svg>
        <h3 class="text-lg font-semibold text-gray-700 dark:text-gray-300">Keine Patienten gefunden</h3>
        <p class="text-gray-500 dark:text-gray-400 mt-2">Fügen Sie Ihren ersten Patienten hinzu!</p>
    </div>

    <!-- Create/Edit Modal -->
    <div x-show="showModal" 
         x-transition:enter="transition ease-out duration-300"
         x-transition:enter-start="opacity-0"
         x-transition:enter-end="opacity-100"
         x-transition:leave="transition ease-in duration-200"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed inset-0 z-50 overflow-y-auto" 
         style="display: none;">
        <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
            <!-- Backdrop -->
            <div class="fixed inset-0 transition-opacity" aria-hidden="true">
                <div class="absolute inset-0 bg-gray-500 dark:bg-gray-900 opacity-75"></div>
            </div>

            <!-- Modal Panel -->
            <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
                <form @submit.prevent="savePatient()">
                    <div class="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white mb-4" x-text="modalTitle"></h3>
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <!-- Name -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Name *</label>
                                <input type="text" x-model="currentPatient.name" required
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            </div>

                            <!-- Species -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Tierart *</label>
                                <select x-model="currentPatient.species" required
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                    <option value="">Bitte wählen</option>
                                    <option value="dog">Hund</option>
                                    <option value="cat">Katze</option>
                                    <option value="horse">Pferd</option>
                                    <option value="rabbit">Hase</option>
                                    <option value="bird">Vogel</option>
                                    <option value="reptile">Reptil</option>
                                    <option value="other">Andere</option>
                                </select>
                            </div>

                            <!-- Breed -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Rasse</label>
                                <input type="text" x-model="currentPatient.breed"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            </div>

                            <!-- Birth Date -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Geburtsdatum</label>
                                <input type="date" x-model="currentPatient.birth_date"
                                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            </div>

                            <!-- Owner -->
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Besitzer *</label>
                                <select x-model="currentPatient.owner_id" required
                                        class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                    <option value="">Bitte wählen</option>
                                    <template x-for="owner in owners" :key="owner.id">
                                        <option :value="owner.id" x-text="owner.first_name + ' ' + owner.last_name"></option>
                                    </template>
                                </select>
                            </div>

                            <!-- Notes -->
                            <div class="md:col-span-2">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Notizen</label>
                                <textarea x-model="currentPatient.notes" rows="3"
                                          class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                        <button type="submit" 
                                class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-gradient-to-r from-purple-600 to-indigo-600 text-base font-medium text-white hover:from-purple-700 hover:to-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:ml-3 sm:w-auto sm:text-sm">
                            Speichern
                        </button>
                        <button type="button" @click="closeModal()"
                                class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                            Abbrechen
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
function patientsManager() {
    return {
        patients: [],
        owners: [],
        loading: false,
        showModal: false,
        modalTitle: 'Neuer Patient',
        searchQuery: '',
        speciesFilter: '',
        searchTimeout: null,
        currentPatient: {
            id: null,
            name: '',
            species: '',
            breed: '',
            birth_date: '',
            owner_id: '',
            notes: ''
        },

        async init() {
            await this.loadOwners();
            await this.loadPatients();
        },

        async loadPatients() {
            this.loading = true;
            try {
                const params = new URLSearchParams({
                    action: 'get_all',
                    search: this.searchQuery,
                    species: this.speciesFilter
                });

                const response = await fetch(`/public/patients.php?${params}`, {
                    headers: { 'Accept': 'application/json' }
                });
                const data = await response.json();
                
                if (data.status === 'success') {
                    this.patients = data.data;
                    
                    // Animate cards on load
                    this.$nextTick(() => {
                        anime({
                            targets: '.grid > div',
                            translateY: [20, 0],
                            opacity: [0, 1],
                            delay: anime.stagger(100),
                            duration: 600,
                            easing: 'easeOutQuad'
                        });
                    });
                }
            } catch (error) {
                console.error('Fehler beim Laden der Patienten:', error);
            } finally {
                this.loading = false;
            }
        },

        async loadOwners() {
            try {
                const response = await fetch('/public/owners.php?action=get_all', {
                    headers: { 'Accept': 'application/json' }
                });
                const data = await response.json();
                
                if (data.status === 'success') {
                    this.owners = data.data;
                }
            } catch (error) {
                console.error('Fehler beim Laden der Besitzer:', error);
            }
        },

        debounceSearch() {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(() => {
                this.loadPatients();
            }, 500);
        },

        openCreateModal() {
            this.modalTitle = 'Neuer Patient';
            this.currentPatient = {
                id: null,
                name: '',
                species: '',
                breed: '',
                birth_date: '',
                owner_id: '',
                notes: ''
            };
            this.showModal = true;
        },

        editPatient(patient) {
            this.modalTitle = 'Patient bearbeiten';
            this.currentPatient = {
                id: patient.id,
                name: patient.name,
                species: patient.species,
                breed: patient.breed || '',
                birth_date: patient.birth_date || '',
                owner_id: patient.owner_id,
                notes: patient.notes || ''
            };
            this.showModal = true;
        },

        closeModal() {
            this.showModal = false;
            anime({
                targets: '.modal',
                opacity: [1, 0],
                duration: 300,
                easing: 'easeOutQuad'
            });
        },

        async savePatient() {
            try {
                const formData = new FormData();
                const action = this.currentPatient.id ? 'update' : 'create';
                
                formData.append('action', action);
                if (this.currentPatient.id) {
                    formData.append('id', this.currentPatient.id);
                }
                formData.append('name', this.currentPatient.name);
                formData.append('species', this.currentPatient.species);
                formData.append('breed', this.currentPatient.breed);
                formData.append('birth_date', this.currentPatient.birth_date);
                formData.append('owner_id', this.currentPatient.owner_id);
                formData.append('notes', this.currentPatient.notes);

                const response = await fetch('/public/patients.php?action=' + action, {
                    headers: { 'Accept': 'application/json' },
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                
                if (data.status === 'success') {
                    this.closeModal();
                    await this.loadPatients();
                    
                    // Success animation
                    const message = this.currentPatient.id ? 'Patient aktualisiert!' : 'Patient hinzugefügt!';
                    this.showNotification(message, 'success');
                } else {
                    this.showNotification(data.message || 'Fehler beim Speichern', 'error');
                }
            } catch (error) {
                console.error('Fehler beim Speichern:', error);
                this.showNotification('Fehler beim Speichern', 'error');
            }
        },

        async deletePatient(patient) {
            if (!confirm(`Möchten Sie ${patient.name} wirklich löschen?`)) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('id', patient.id);

                const response = await fetch('/public/patients.php?action=delete&id=' + patient.id, {
                    headers: { 'Accept': 'application/json' },
                    method: 'POST',
                    body: formData
                });

                const data = await response.json();
                
                if (data.status === 'success') {
                    await this.loadPatients();
                    this.showNotification('Patient gelöscht!', 'success');
                } else {
                    this.showNotification(data.message || 'Fehler beim Löschen', 'error');
                }
            } catch (error) {
                console.error('Fehler beim Löschen:', error);
                this.showNotification('Fehler beim Löschen', 'error');
            }
        },

        viewPatient(patient) {
            window.location.href = `/public/patient.php?id=${patient.id}`;
        },

        getSpeciesIcon(species) {
            const icons = {
                'dog': '🐕',
                'cat': '🐈',
                'horse': '🐴',
                'rabbit': '🐰',
                'bird': '🦜',
                'reptile': '🦎',
                'other': '🐾'
            };
            return icons[species] || '🐾';
        },

        getSpeciesName(species) {
            const names = {
                'dog': 'Hund',
                'cat': 'Katze',
                'horse': 'Pferd',
                'rabbit': 'Hase',
                'bird': 'Vogel',
                'reptile': 'Reptil',
                'other': 'Andere'
            };
            return names[species] || 'Unbekannt';
        },

        calculateAge(birthDate) {
            if (!birthDate) return '';
            const birth = new Date(birthDate);
            const today = new Date();
            const age = today.getFullYear() - birth.getFullYear();
            return age + (age === 1 ? ' Jahr' : ' Jahre');
        },

        showNotification(message, type) {
            // Temporäre Notification-Anzeige
            const notification = document.createElement('div');
            notification.className = `fixed top-4 right-4 px-6 py-3 rounded-lg text-white z-50 ${
                type === 'success' ? 'bg-green-500' : 'bg-red-500'
            }`;
            notification.textContent = message;
            document.body.appendChild(notification);

            anime({
                targets: notification,
                translateX: [100, 0],
                opacity: [0, 1],
                duration: 300,
                easing: 'easeOutQuad'
            });

            setTimeout(() => {
                anime({
                    targets: notification,
                    translateX: [0, 100],
                    opacity: [1, 0],
                    duration: 300,
                    easing: 'easeInQuad',
                    complete: () => notification.remove()
                });
            }, 3000);
        }
    };
}
</script>
{% endblock %}